var D=Object.defineProperty;var L=(t,e,o)=>e in t?D(t,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[e]=o;var i=(t,e,o)=>(L(t,typeof e!="symbol"?e+"":e,o),o);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))a(n);new MutationObserver(n=>{for(const s of n)if(s.type==="childList")for(const l of s.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&a(l)}).observe(document,{childList:!0,subtree:!0});function o(n){const s={};return n.integrity&&(s.integrity=n.integrity),n.referrerpolicy&&(s.referrerPolicy=n.referrerpolicy),n.crossorigin==="use-credentials"?s.credentials="include":n.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function a(n){if(n.ep)return;n.ep=!0;const s=o(n);fetch(n.href,s)}})();class T{constructor(e,o,a,n){i(this,"taskName");i(this,"deadline");i(this,"addedDate");i(this,"isComplete");this.taskName=e,this.deadline=o,this.addedDate=a,this.isComplete=n}}const r=[],f=document.querySelector("#darkModeBtn"),y=document.querySelector("#incompleteTasks"),k=document.querySelector("#completedTasks"),d=document.querySelector("#writeItem"),u=document.querySelector("#date"),p=document.querySelector("#addItemBtn"),v=document.querySelector("#sort");function w(){document.body.classList.toggle("darkMode")}f==null||f.addEventListener("click",w);function c(){y.innerHTML="",k.innerHTML="";let t="",e="";const o=new Date;r.forEach((s,l)=>{const b=new Date(s.deadline);let m="";if(b<o&&(m="overdue"),s.isComplete){e+=`
      <li>
        <span>${s.taskName}</span>
        <span class="deadline ${m}">${s.deadline}</span>
        <button class="removeIcon" aria-label="Remove">
        <i class="removeIcon fa-solid fa-x fa-lg" data-id="${l}"></i>
        </button>
      </li> `;return}t+=`
    <li>
        <input type="checkbox" id="toDoCheckbox" class="toDoCheckbox" data-id="${l}">
        <span>${s.taskName}</span>
        <span class="chosenCategory"></span>
        <span class="deadline ${m}">${s.deadline}</span>
        <button class="removeIcon" aria-label="Remove">
          <i class="removeIcon fa-solid fa-x fa-lg" data-id="${l}"></i>
        </button>
    </li> `}),y.innerHTML=t,k.innerHTML=e,Array.from(document.querySelectorAll("li button.removeIcon")).forEach(s=>{s.addEventListener("click",N)}),Array.from(document.querySelectorAll(".toDoCheckbox")).forEach(s=>{s.addEventListener("change",S)})}function S(t){var n;const e=t.target,o=Number(e.dataset.id),a=r[o];a.isComplete=!0,(n=e==null?void 0:e.parentElement)==null||n.classList.toggle("completed"),r.filter(s=>s.isComplete===!0),c()}function N(t){const e=t.target,o=Number(e.dataset.id);o!==void 0&&(r.splice(o,1),c())}c();function g(t,e){const o=t.parentElement,a=o==null?void 0:o.querySelector("small"),n=o==null?void 0:o.querySelector(".errorIcon");n==null||n.classList.remove("toggleHidden"),a==null||a.classList.remove("toggleHidden"),a.innerText=e,o.className="formControl error"}function h(t){const e=t.parentElement;(e==null?void 0:e.querySelector("small")).classList.add("toggleHidden"),e.className="formControl"}function E(t){t.preventDefault();const e=new Date,a=new Date(u.value).toLocaleDateString(),n=new T(d.value,a,e,!1);if(d.value.length===0){g(d,"You need to write something");return}if(u.value.length===0){g(u,"You need to pick a deadline");return}r.findIndex(l=>l.taskName===d.value)===-1?(r==null||r.push(n),c(),h(d),h(u)):g(d,"You've already added this task")}p==null||p.addEventListener("click",E);function x(){switch(v.value){case"deadline":r.sort((t,e)=>new Date(t.deadline).getTime()-new Date(e.deadline).getTime()),c();break;case"alfabetic":r.sort((t,e)=>{const o=t.taskName.toLowerCase(),a=e.taskName.toLowerCase();return o<a?-1:(o>a,0)}),c();break;case"lastAdded":r.sort((t,e)=>e.addedDate.getTime()-t.addedDate.getTime()),c();break;case"oldestDate":r.sort((t,e)=>t.addedDate.getTime()-e.addedDate.getTime()),c();break}}v.addEventListener("input",x);
